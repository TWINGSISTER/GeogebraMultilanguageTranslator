<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>Start Geogebra Translator</title>
  </head>
  <body>
    <h3 style="text-align: justify;">How to start the One Step Adapter (OSA)</h3>
    <p style="text-align: justify;">Click below to start Geogebra OSA in Version
      5.0. Particular builds of GGB is used:</p>
    <ul style="text-align: justify;">
      <li><a href="index-private-latest-OSA.html" target="_blank">Latest Build
          generated by GitHub Actions (now 720)</a></li>
    </ul>
    <p style="text-align: justify;">GGB builds generated by GitHub Actions are
      available as releases in <a href="https://github.com/TWINGSISTER/Geogebra-Javascript-Bundle"
        target="_blank">this repository</a>.&nbsp; </p>
    <h3 style="text-align: justify;">How to use the OSA</h3>
    <p style="text-align: justify;">The OSA&nbsp; starts as a Geogebra page. To
      obtain a OSAed version of SomeName.ggb file one has to fill the input
      boxes&nbsp; and click the button <span style="color: red;">"Select Files"</span>.
      Then a file picker comes up and you can select one or more files
      SomeName.ggb. </p>
    <p style="text-align: center;"><img src="OSAmask.jpg" alt="" style="width: 657px; height: 283px;"></p>
    <br>
    <p>The service do his work and then&nbsp; prompts to download&nbsp; the
      OSAed&nbsp; ggbs that are the adapted versions of the input ggbs. The user
      can specify with "<span style="color: red;">Output Filename Suffix</span>"&nbsp;
      ONE suffix to be added to the output filenames.&nbsp; Here are the
      meanings of the input fields. When the situation requires more inputs they
      can be given as a comma separated list. If the situation requires a list
      of lists you can put a comma separated list of pipe (|) separated lists.
      For instance as in "Valider|Delete[Valider],Bouton2|Delete[Bouton2]" where
      one finds the two couples Valider|Delete[Valider] and
      Bouton2|Delete[Bouton2]. Here is the list of input fields and their
      meaning: </p>
    <ul>
      <li><span style="color: red;">Name or caption of deleted objects</span>:
        the given list of strings are taken as GGB objects name that must be
        deleted. If they are not found then the OSA searches for objects that
        have these strings as captions. If nothing is found no action is taken
        and the OSA proceeds. </li>
      <li><span style="color: red;">Name or caption for appended code</span>: a
        list of couples, e.g. a|code1,b|code2,c|code3 is required. Then OSA
        searches for objects (named or with caption) a,b,c and append the
        string&nbsp; code1 (for a), code2 (for b etc.) to the script associated
        with the object. What actually happens depends much on the GGB
        internals. Please consider that if the object a has a GGB script then
        string code1 must be a valid GGB script fragment (not a JS fragment).
        The type of the object also plays a big role. For buttons the code goes
        to&nbsp; the onclick script.</li>
      <li><span style="color: red;">Name or caption for substituted code</span>:
        similar to the previous field. The existing code is deleted and the
        given code&nbsp; is placed instead of it.</li>
      <li><span style="color: red;">Libraries</span>: a list of strings that are
        taken as URLs for JS files that will be&nbsp; loaded by the OASed GGB
        activity when launched. These files ARE NOT loaded when running this OAS
        service.</li>
      <li><span style="color: red;">Output Filename Suffix</span>: just one
        string e.g. "-one" and the output of processing foo.ggb will be
        foo-one.ggb</li>
      <li><span style="color: red;">Init code</span>: a string with a JS
        fragment that will be added to the initialization code run by the OASed
        .ggb when starting.</li>
      <li><span style="color: red;">Initialization Functions</span>: a list of
        strings that are the names of the functions that are needed in the
        initialization code. The code for these functions is scanned to find
        other functions names that are needed. If some functions are needed in
        other places put them in this list. To limit the number of functions to
        be searched the filter in the field "<span style="color: red;">Filter</span>"
        is applied. The Filter is a list of strings that acts as prefixes. If
        the Filter is, for instance, "RT_,ST_" only functions starting with RT_
        and ST_ are included.</li>
      <li><span style="color: red;">Buttons to add</span>: a list of triples
        e.g. name|caption|code,n1|c1|sw1. creates button named n1 with caption
        c1 and with handler given as the function named sw1</li>
    </ul>
    <p style="text-align: justify; background-color: white;">&nbsp; In
      particular the choice in the example will give files SomeName-one.ggb
      decorated with an additional button LOG that you can use to output a html
      file (by function RT_R_DocHndl) with the snapshot taken with the function
      RT_R_oneHndl2 linked to the button Bouton2 in the initialization code.This
      snapshot the GGB exercise situation every time Bouton2 is pressed.&nbsp;
      The other code ensures that Bouton2 is deleted upon the first&nbsp; click.
      For completeness let's add that RT_R_oneHndl2 snapshot both Graphics and
      Graphics2 views while there is provision in the code for the function
      RT_R_oneHndl that just snapshots Graphics.</p>
    <br>
    <p style="text-align: justify;"><br>
    </p>
    <p style="text-align: justify;">You can find an example of the resulting GGB
      activity <a href="example.html" target="_blank">here</a> that is taken
      from <a href="http://www.lycee-valin.fr/maths/exercices_en_ligne/moodle.html"
        target="_blank">this site</a>. The multilingual GGB activity will have
      name SomeName-FL-XY-XZ-YZ.ggb where the language codes XY-XZ-YZ are
      reordered alphabetically. In the GGB document, to be fair, the buttons are
      reordered in an inverse alphabetical orderer but the original language
      button always comes last. </p>
    <h3 style="text-align: justify;">Features</h3>
    <p style="text-align: justify;">In some framework (e.g. Moodle question
      banks), turning on&nbsp; automatic translation within your browser can do
      the trick and present acceptable translation of school activities.&nbsp;
      With Geogebra this will not work. Furthermore, in many occasions,
      translating&nbsp; a Geogebra activity require to get some grasp upon the
      developer logic and very often, if you are not the developer, to build a
      new activity from the scratch is easier than translating an existing one.
      <br>
      <br>
      This package tries to do its best to extract all textual elements from an
      activity, feed them through an online translator, record the translation
      and build some persistent machinery, in the Geogebra ggb document. The
      goal is to record the two or more linguistic versions of an activity
      within a single ggb file. This ggb, then&nbsp; can then be shipped as a
      standalone classroom activity. <br>
      <br>
      This tool does not try to generate automatically a translation using an
      online translation. This tool produce an HTML list of all the strings that
      needs translation. The user can translate this document by hand or by
      feeding it thru some online translation facility. The translated HTML will
      then be automatically linked within a multi-lingual ggb activity.</p>
    <p style="text-align: justify;"><br>
      This package handles&nbsp; multi-language ggb supporting several languages
      within a single ggb document. This package can, somehow, follow the
      development process. For instance, the teacher, &nbsp; having slightly
      changed the logic of an activity, keeping all the textual parts unchanged,
      has the option to rebuild the multilingual ggb without repeating all the
      process. On the other hand if some strings are changed the process must
      update strings only in a particular language and then ask to some online
      translator, for an update of&nbsp; all the other translations.Then a new
      build is required. The same is for adding a new language.</p>
    <h3 style="text-align: justify;">Debugging the translation</h3>
    <p style="text-align: justify;">Some translation string might not fit
      nicely. You can see where the problem is and try a quick fix directly in
      the ggb file. The user can find the translated strings in the Algebra view
      as Geogebra Text Auxiliary objects with special names following the
      pattern ZZ000&lt;languageCode&gt;&lt;originalObjectName&gt;.</p>
    <p style="text-align: justify;"><br>
      Therefore, for instance, if your .ggb contains a button named
      ```BoutonOui``` with caption "Oui" you will find in the Algebra View the
      strings `ZZ000frBoutonOui` with value "Oui" but also `ZZ000itBoutonOui`
      with value "Si" and `ZZ000enBoutonOui` with value "Yes". If you are not
      satisfied with this you can edit these strings and changes will be
      reflected in your Geogebra activity (e.g. you can put "Yeah!" into
      ```ZZ000enBoutonOui```). If you save the file with the result of your work
      you will have a version of your activity that will preserve the fixes you
      worked out. <br>
      <br>
      This .ggb it is ready to receive modified translations, too. If you modify
      the logic of the activity and ask for revising an already worked out
      translation the existing translation strings are not recomputed and only
      newly introduced&nbsp; untranslated objects are translated and
      inserted.&nbsp; If you delete a translation string
      `ZZ000enBoutonOui`&nbsp; the relative object will be considered as
      untranslated and generated again the first time you ask to merge an `EN`
      translation. <br>
      <br>
      So, if you operate a single language .ggt you can safely delete all&nbsp;
      the `ZZ000&lt;languagexx&gt;&lt;originalObjectName&gt;` strings in the
      Algebra view if you are not interested in language "xx" anymore. This will
      make the ggb document more compact and responsive.&nbsp;&nbsp; </p>
    <h3 style="text-align: justify;">Browser problems</h3>
    <p style="text-align: justify;">The translator tool works only in the
      Geogebra web version some&nbsp; problems might come from security
      limitations of the browser. You can circumvent it by running the Geogebra
      applet in Chrome with the option `--disable-site-isolation-trials
      --disable-web-security` e.g. in Windows </p>
    <div style="text-align: justify;">
      <pre>"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --disable-site-isolation-trials --disable-web-security --user-data-dir="I:\temp"</pre>
    </div>
    <p style="text-align: justify;"> For Chrome you might try also
      --disable-web-security --allow-no-sandbox-job
      --allow-sandbox-debugging&nbsp; --no-sandbox&nbsp;
      --no-sandbox-and-elevated&nbsp; --no-zygote --no-zygote-sandbox
      --run-without-sandbox-for-testing --disable-popup-blocking&nbsp;&nbsp;
      --user-data-dir="I:\temp" they could help. </p>
    <p style="text-align: justify;">The file index&lt;somename&gt;.html loads
      the GGB application and the GGB activity `transMulti.ggb` into a GGB
      Applet that runs in a browser. Loading could be slow. While debugging you
      can re-initialize the translator from the GGB File menu by reloading the
      `transMulti.ggb` file.</p>
    <h3 style="text-align: justify;">Translator Tuning and&nbsp; Configuration</h3>
    <p style="text-align: justify;">There is a central selected place in this JS
      code where, even the un-experienced programmer, can do some editing to
      make the translator comply with a known style used in textual elements for
      a set of known ggb activities. This configuration parameters are strings
      that are found either in the context of function calls or as assignments
      to variables in the&nbsp; file <b>Init.js</b> . So in the following we
      list all possible configuration options referring them either as function
      call parameter or as expression in assignment. You can find them with some
      comments in the file <b>Init.js</b></p>
    <p style="text-align: justify;">To understand the possible tuning operations
      one has to consider the fact that this process works in two steps. The
      first step locates what must be translated. The second step takes several
      translations and apply them. Troubles in the first step comes mainly from
      the fact that something that must not be translated is fed to the
      translator, the obvious example being LaTeX commands (e.g. \text)&nbsp;
      that are ubiquitous in GGB activities and should NOT become \texte or
      whatever. There are a number of ways to get this. Let's step thru the code
      to configure this in <b>Init.js</b></p>
    <p style="text-align: justify;">The list in the call to updateDictionary
      contains the strings that need no translation. They will remain as they
      are if they are EXACTLY occurring as strings in GGB activities. If you put
      there e.g. "XYZ" then also \text{XYZ} "'XYZ", "&nbsp; XYZ&nbsp; " will
      pass untranslated. Simply add the string you do not want to be translated
      in this list...</p>
    <pre style=" text-align: justify;">	updateDictionary(["\\text{", "}","{"...])</pre>
    <p style="text-align: justify;"> In Init,js There are also a pair of
      initialization that helps the software to parse LaTeX code. Note that a
      complete LaTeX parser (if ever available in Javascript) is not going to be
      of great help because, very often, GGB activity creators mix textual
      content and&nbsp; <b>fragments</b> of LaTeX code to be assembled in a
      complete LaTeX expression as the activity proceeds. The dictionary dict
      initialized by another list like...:</p>
    <pre style=" text-align: justify;">var dict = new Map( [ ["text",1],["bar",1],...])</pre>
    <p style="text-align: justify;">that contains as keys the Latex commands
      with the number of required parameters. This structure "dict" is a map and
      keys can also be regexp. The line </p>
    <pre style=" text-align: justify;">["text",1],["end",-1],["textcolor",[false,true]]
</pre>states that \text has one parameter, \end has one parameter that do not
    need translation and \textcolor has two parameters and the first do not need
    translation. The system recognize latex command on the ground of the&nbsp;
    dictionary initialized by:
    <pre style=" text-align: justify;">&nbsp;&nbsp;&nbsp; updateLatexPatterns([<br>&nbsp;&nbsp;&nbsp; '\\\\cr','\\\\\\\\',<br>&nbsp;&nbsp;&nbsp; '\\\\;','\\\\,',<br>&nbsp;&nbsp;&nbsp; '\\\\left\\(','\\\\right\\)',<br>	...<br>&nbsp;&nbsp;&nbsp; '\\\\left','\\\\right', <br>&nbsp;&nbsp;&nbsp; '\\\\[a-zA-Z]{2,}',&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; '\\\\[^a-zA-Z]',&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; '\\\\[^\\{|^\\s|^\\\\]*'&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; ]);</pre>
    <p style="text-align: justify;">that is pretty complete. Note that prefixes
      like '\\\\left' comes before the longer match '\\\\left\\['. &nbsp;
      Running the first step and consulting the html output you can add strings
      you will find in the html file if you know that they do not need
      translation. You must add them to the call to updateDictionary.&nbsp;
      Finally note that pressing F12 in the browser console you can see the
      translator debug messages and draw some ideas on how to adapt the
      translator to your style..<br>
      <br>
      In the second step problems can only come from the external translator and
      you can solve them simply revising the html file returned by the
      translator before applying it. Very often you will find recurring problems
      like "Dernier exercice" being translated as "Last fiscal year" and so on.
      You can enforce that every time from FR to EN "Dernier exercice" is
      translated into "Last fiscal year" you will have "Last exercise". You can
      obtain this by modifying the code in the function definition for&nbsp;
      initFalsePair. More pricesely you must add a couple in the second
      parameter of the call to updateFalsePair(XX,[..]) where XX is the target
      language. For instance adding a line like:</p>
    <pre style=" text-align: justify;">function initFalsePair() {<br>&nbsp;&nbsp;&nbsp; updateFalsePair("EN", ....<br>["Dernierexercice","Last exercise"],</pre>
    <p style="text-align: justify;">will ignore the translation&nbsp; in the
      ...-FL-XX_EN.html for the key Derniereexercice and put there "Last
      exercise".&nbsp; You can find the actual key Derniereexercice in the file
      ...-FL-XX_EN.html since there it will be like this&nbsp; </p>
    <pre style=" text-align: justify;">&lt;div id="texte40ovalboxArg1textArg1"
	data-title="Dernierexercice"
class="noop"&gt;Last fiscal year&lt;/div&gt;
</pre>
    <p style="text-align: justify;">The key Derniereexercice is based on the
      original text and therefore this will apply probably to other similar
      situations in other&nbsp; activities in French. Please note that the false
      pair is stored in a JS map and therefore in the initialization you can use
      a regexp as a key i.e.&nbsp; /Derniere[s]?exercice[s]?/ instead of
      "Derniereexercice" and match also the four keys Dernieresexercices,
      Dernieresexercice etc.</p>
    <h3 style="text-align: justify;">Eclipse Repository</h3>
    <p style="text-align: justify;">This project was developed and maintained
      using Eclipse and Egit. Not all the files have a&nbsp; clear meaning. The
      repository is undoubtedly messy. Nevertheless the repository contains all
      files generated by Eclipse. By forking this in GitHub and by cloning your
      fork directly from&nbsp; GitHub into Eclipse with a Egit clone operation
      you will get an Eclipse project to modify and develop this package on your
      own. If you feel that later on you can cooperate with us&nbsp; branch your
      project locally this will make your contribution later submit-able as a
      pull request. The `.launch` files you will find in this repo must be
      imported into Eclipse separately to get debug configurations. </p>
    <ul style="text-align: justify;">
    </ul>
  </body>
</html>
